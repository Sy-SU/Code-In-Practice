#include <bits/stdc++.h>

using i64 = long long;

constexpr int N = 2e5 + 10;
constexpr int mod = 1e9 + 7;

char map[3][N];

i64 dp[1000][N];

int possi[] = {
    123, 132, 213, 231, 312, 321,
    124, 142, 214, 241, 412, 421,
    125, 152, 215, 251, 512, 521,
    126, 162, 216, 261, 612, 621,
    127, 172, 217, 271, 712, 721,
    128, 182, 218, 281, 812, 821,
    129, 192, 219, 291, 912, 921,
    134, 143, 314, 341, 413, 431,
    135, 153, 315, 351, 513, 531,
    136, 163, 316, 361, 613, 631,
    137, 173, 317, 371, 713, 731,
    138, 183, 318, 381, 813, 831,
    139, 193, 319, 391, 913, 931,
    145, 154, 415, 451, 514, 541,
    146, 164, 416, 461, 614, 641,
    147, 174, 417, 471, 714, 741,
    148, 184, 418, 481, 814, 841,
    149, 194, 419, 491, 914, 941,
    156, 165, 516, 561, 615, 651,
    157, 175, 517, 571, 715, 751,
    158, 185, 518, 581, 815, 851,
    159, 195, 519, 591, 915, 951,
    167, 176, 617, 671, 716, 761,
    168, 186, 618, 681, 816, 861,
    169, 196, 619, 691, 916, 961,
    178, 187, 718, 781, 817, 871,
    179, 197, 719, 791, 917, 971,
    189, 198, 819, 891, 918, 981,
    234, 243, 324, 342, 423, 432,
    235, 253, 325, 352, 523, 532,
    236, 263, 326, 362, 623, 632,
    237, 273, 327, 372, 723, 732,
    238, 283, 328, 382, 823, 832,
    239, 293, 329, 392, 923, 932,
    245, 254, 425, 452, 524, 542,
    246, 264, 426, 462, 624, 642,
    247, 274, 427, 472, 724, 742,
    248, 284, 428, 482, 824, 842,
    249, 294, 429, 492, 924, 942,
    256, 265, 526, 562, 625, 652,
    257, 275, 527, 572, 725, 752,
    258, 285, 528, 582, 825, 852,
    259, 295, 529, 592, 925, 952,
    267, 276, 627, 672, 726, 762,
    268, 286, 628, 682, 826, 862,
    269, 296, 629, 692, 926, 962,
    278, 287, 728, 782, 827, 872,
    279, 297, 729, 792, 927, 972,
    289, 298, 829, 892, 928, 982,
    345, 354, 435, 453, 534, 543,
    346, 364, 436, 463, 634, 643,
    347, 374, 437, 473, 734, 743,
    348, 384, 438, 483, 834, 843,
    349, 394, 439, 493, 934, 943,
    356, 365, 536, 563, 635, 653,
    357, 375, 537, 573, 735, 753,
    358, 385, 538, 583, 835, 853,
    359, 395, 539, 593, 935, 953,
    367, 376, 637, 673, 736, 763,
    368, 386, 638, 683, 836, 863,
    369, 396, 639, 693, 936, 963,
    378, 387, 738, 783, 837, 873,
    379, 397, 739, 793, 937, 973,
    389, 398, 839, 893, 938, 983,
    456, 465, 546, 564, 645, 654,
    457, 475, 547, 574, 745, 754,
    458, 485, 548, 584, 845, 854,
    459, 495, 549, 594, 945, 954,
    467, 476, 647, 674, 746, 764,
    468, 486, 648, 684, 846, 864,
    469, 496, 649, 694, 946, 964,
    478, 487, 748, 784, 847, 874,
    479, 497, 749, 794, 947, 974,
    489, 498, 849, 894, 948, 984,
    567, 576, 657, 675, 756, 765,
    568, 586, 658, 685, 856, 865,
    569, 596, 659, 695, 956, 965,
    578, 587, 758, 785, 857, 875,
    579, 597, 759, 795, 957, 975,
    589, 598, 859, 895, 958, 985,
    678, 687, 768, 786, 867, 876,
    679, 697, 769, 796, 967, 976,
    689, 698, 869, 896, 968, 986,
    789, 798, 879, 897, 978, 987
};


void solve() {
	int n;
	std::cin >> n;

	for (int i = 0; i < 3; i++) {
		for (int j = 1; j <= n; j++) {
			std::cin >> map[i][j];
		}
	}

	for (int i = 0; i <= 999; i++) {
		for (int j = 0; j <= n; j++) {
			dp[i][j] = 1;
		}
	}

	for (int i = 1; i <= n; i++) {
		std::vector<int> need;
		for (int j = 0; j < 3; j++) {
			if (map[i][j] != '?') {
				need.push_back(map[j][i] - '0');
			}
		}
		std::vector<int> ok;
		for (int k = 0; k < 504; k++) {
			int th = possi[k];
			bool isok = 1;
			int idx = 0;
			while (th) {
				if (map[idx][i] != '?' && th % 10 != (map[idx][i] - '0')) {
					isok = 0;
				}
				idx++;
				th /= 10;
			}
			if (isok) {
				ok.push_back(possi[k]);
			}
		}

		for (const auto &oknum : ok) {
			std::cerr << "oknum = " << oknum << '\n';
			int i1 = oknum / 100, i2 = (oknum / 10) % 10, i3 = oknum % 10;
			if (i >= 3) {
				dp[oknum][i] *= dp[i1 * 100 + i2 * 10 + i3][i - 3];
				dp[oknum][i] *= dp[i1 * 100 + i3 * 10 + i2][i - 3];
				dp[oknum][i] *= dp[i2 * 100 + i1 * 10 + i3][i - 3];
				dp[oknum][i] *= dp[i2 * 100 + i3 * 10 + i1][i - 3];
				dp[oknum][i] *= dp[i3 * 100 + i1 * 10 + i2][i - 3];
				dp[oknum][i] *= dp[i3 * 100 + i2 * 10 + i1][i - 3];
			} else {
				dp[oknum][i] = 1ll;
			}
		}
		std::cerr << '\n';
	}
	i64 ans = 0;
	for (int i = 1; i <= 999; i++) {
		ans += dp[i][n];
	}
	std::cout << ans << '\n';
}

int main() {
	std::ios::sync_with_stdio(false);
	std::cin.tie(nullptr);

	int t = 1;
	std::cin >> t;
	while (t--) {
		solve();
	}

	return 0;
}